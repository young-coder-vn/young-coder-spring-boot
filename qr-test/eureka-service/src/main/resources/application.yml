---
# This default profile is used when running a single instance completely standalone:

spring:
  cloud:
    loadbalancer:
      ribbon:
        enabled: false
  profiles: default
  application:
    name: eureka-server
server:
  port: 1000
eureka:
  instance:
    hostname: youngcoder.com
    lease-renewal-interval-in-seconds: 30
    lease-expiration-duration-in-seconds: 60
  client:
    registerWithEureka: false
    fetchRegistry: false
    serviceUrl:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
  server:
    enable-self-preservation: false
  # united-states, france, and vietnam illustrate running 3 intercommunicating instances.
  # This example has them running side-by-side on localhost
  # -- which is unrealistic in production
  # -- but does illustrate how multiple instances collaborate.
  #
  # Run by opening 3 separate command prompts:
  # java -jar -Dspring.profiles.active=united-states SpringCloudServiceRegistrationEurekaServer.jar
  # java -jar -Dspring.profiles.active=france SpringCloudServiceRegistrationEurekaServer.jar
  # java -jar -Dspring.profiles.active=vietnam SpringCloudServiceRegistrationEurekaServer.jar

---
spring:
  profiles: united-states
  application:
    name: eureka-server-clustered   # ==> This is Service-Id
server:
  port: 9001
eureka:
  instance:
    hostname: youngcoder.us
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/

---
spring:
  profiles: france
  application:
    name: eureka-server-clustered   # ==> This is Service-Id
server:
  port: 9002
eureka:
  instance:
    hostname: youngcoder.fr
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/

---
spring:
  profiles: vietnam
  application:
    name: eureka-server-clustered    # ==> This is Service-Id
server:
  port: 9003
eureka:
  instance:
    hostname: youngcoder.vn
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/

